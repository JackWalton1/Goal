@page "/signup"
@using UserDatabaseManagement
@using EventDatabaseManagement
@using MongoDB.Driver
@using System.Diagnostics
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using StateManager
@inject ISnackbar Snackbar
@inject NavigationManager nav

<MudContainer Class="px-8">
    <MudStack Spacing="8">
        <MudButton Class="align-content-start justify-content-start" Size="Size.Large" Href="/login" StartIcon="@Icons.Material.Filled.ChevronLeft">back to log in</MudButton>

        <MudItem>
            <MudText Typo="Typo.h3" Align="Align.Center">create account</MudText>
            <MudText Align="Align.Center">* = required field</MudText>
        </MudItem>

        <MudTextField Align="center" Required="true" RequiredError="username is required" @bind-Value="Username" Label="username" Variant="Variant.Outlined"></MudTextField>
        <MudTextField Align="center" Required="true" RequiredError="password is required" @bind-Value="Password" Label="password" Variant="Variant.Outlined" 
            InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="viewPassword" AdornmentAriaLabel="Show Password"></MudTextField>
        <MudTextField Align="center" Required="true" RequiredError="location is required" @bind-Value="Location" Label="location" Variant="Variant.Outlined"></MudTextField>
        @if (StateManager.CurrentUser != null && StateManager.CurrentUser.AccessLevel == "Town Admin")
        {
            <MudTextField Align="center" Required="true" RequiredError="venue name is required" @bind-Value="VenueName" Label="your venue's name" Variant="Variant.Outlined"></MudTextField>
            <MudTextField Align="center" Required="true" RequiredError="venue address is required" @bind-Value="VenueAddress" Label="your venue's address" Variant="Variant.Outlined"></MudTextField>
        }
        <MudButton OnClick="processAccountCreation" Disabled="@_processing" Variant="Variant.Filled">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>create account</MudText>
            }
        </MudButton>
    </MudStack>
</MudContainer>

@code {
    // TODO: make create account screen only allow creation of citizen accounts

    public string Username { get; set; }
    public string Password { get; set; }
    public string Location { get; set; }
    public string AccessLevel { get; set; }
    public string VenueName { get; set; }
    public string VenueAddress { get; set; }

    private bool _processing = false;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void viewPassword()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task processAccountCreation()
    {
        _processing = true;
        await Task.Delay(1000);
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        UserDatabaseManagement userDatabaseManagement = new UserDatabaseManagement();

        if (StateManager.CurrentUser != null && StateManager.CurrentUser.AccessLevel == "Town Admin")
        {
            userDatabaseManagement.createAccount(Username, Password, Location, "Town Admin", VenueName, VenueAddress);
        } else
        {
            userDatabaseManagement.createAccount(Username, Password, Location, "Citizen", null, null);
        }

        StateManager.CurrentUser = await userDatabaseManagement.fetchAccount(Username, Password);

        Snackbar.Add("account successfully created", Severity.Success);
        _processing = false;
        nav.NavigateTo("/");
    }
 
}
